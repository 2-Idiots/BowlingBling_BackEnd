name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 저장소를 체크아웃 (즉, 현재 작업 디렉토리에 복사)하는 단계
      - uses: actions/checkout@v3

      # JDK 17을 설정하는 단계 (빌드를 위해 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle을 사용하여 프로젝트를 빌드하는 단계
      - name: Build with Gradle
        run: |
          chmod 777 ./gradlew  # Gradle Wrapper 스크립트에 실행 권한 부여
          ./gradlew clean build -x test  # 테스트를 제외하고 빌드 실행

      # DockerHub에 로그인하는 단계 (도커 이미지를 푸시하기 위해 필요)
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # DockerHub 사용자 이름
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # DockerHub 접근 토큰

      # Docker 이미지를 빌드하는 단계
      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/live_server .

      # DockerHub에 도커 이미지를 푸시하는 단계
      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest

  # 배포 단계
  deploy:
    needs: build  # 배포 작업이 build 작업 완료 후에 실행됨
    runs-on: ubuntu-latest
    steps:
      # 대상 서버의 IP 및 현재 활성화된 서비스 확인
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")  # 현재 실행 중인 서비스(blue 또는 green) 확인
          else
            CURRENT_UPSTREAM=green  # 서비스가 실행 중이 아니면 green으로 설정
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV  # blue가 실행 중이면 포트 8080
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV  # green은 멈춘 상태로 포트 8081
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV  # 다음에 활성화될 서비스는 green
          elif [ $CURRENT_UPSTREAM = green ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV  # green이 실행 중이면 포트 8081
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV  # blue는 멈춘 상태로 포트 8080
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV  # 다음에 활성화될 서비스는 blue
          else
            echo "error"
            exit 1
          fi
          
      # 새로 빌드된 Docker 이미지를 사용하여 대상 서버에서 Docker Compose로 서비스 시작
      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/live_server:latest  # 최신 이미지를 pull
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d  # green 또는 blue 구성으로 서비스 실행
      
      # 배포된 서버의 URL을 확인하여 서비스가 정상적으로 동작하는지 검사
      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/env
          max-attempts: 3  # 최대 3번 시도
          retry-delay: 10s  # 시도 간 10초 대기

      # Nginx 설정을 변경하여 트래픽을 새로 배포된 서비스로 라우팅
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'  # Nginx 리로드를 통해 트래픽 전환

      # 기존에 실행 중이던 서비스를 중지하고 컨테이너 삭제
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker stop ${{env.CURRENT_UPSTREAM}}  # 현재 실행 중인 컨테이너 중지
            sudo docker rm ${{env.CURRENT_UPSTREAM}}  # 중지된 컨테이너 삭제
